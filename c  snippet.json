{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"os libraries": {
		"prefix": "os libraries",
		"body": [
			"#include <string.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <unistd.h>",
			"#include <sys/socket.h>",
			"#include <arpa/inet.h>",
			"#include <stdbool.h>",
			"#include <pthread.h>",
			"#include <sys/un.h>",
			"#include <stddef.h>"
		],
		"description": "os libraries"
	},
	"thread_function": {
		"prefix": "thread_function",
		"body": [
			"void thread_function(int sock_fd) {",
			"    log_msg(\"SERVER: thread_function: starting\", false);",
			"    char buffer[5000];",
			"    memset(buffer, '\\0', sizeof(buffer));",
			"    int count = read(sock_fd, buffer, sizeof(buffer));",
			"    if (count > 0) {",
			"        printf(\"SERVER: Received from client: %s\\n\", buffer);",
			"        write(sock_fd, buffer, sizeof(buffer)); /* echo as confirmation */",
			"    }",
			"    close(sock_fd); /* break connection */",
			"    log_msg(\"SERVER: thread_function: Done. Worker thread terminating.\", false);",
			"    pthread_exit(NULL); // Must be the last statement",
			"}"
		],
		"description": "thread_function"
	}
}
